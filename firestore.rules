rules_version = '2';
service cloud.firestore {
  match /databases/play/documents {
    // SESSIONIZER APP COLLECTIONS - All under 'sessionizer' collection
    match /sessionizer/users/users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow clients to read instructor profiles
      allow read: if request.auth != null && resource.data.isInstructor == true;
    }
    
    // Locations: Instructors can only access their own locations
    match /sessionizer/locations/locations/{locationId} {
      allow read, write: if request.auth != null && 
        resource.data.instructorId == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.instructorId == request.auth.uid;
      // Allow clients to read locations for booking
      allow read: if request.auth != null;
    }
    
    // Bookable Sessions: Instructors can only access their own sessions
    match /sessionizer/bookable_sessions/bookable_sessions/{sessionId} {
      allow read, write: if request.auth != null && 
        resource.data.instructorId == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.instructorId == request.auth.uid;
      // Allow clients to read bookable sessions for booking
      allow read: if request.auth != null;
    }
    
    // Schedules: Instructors can only access their own schedules
    match /sessionizer/schedules/schedules/{scheduleId} {
      allow read, write: if request.auth != null && 
        resource.data.instructorId == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.instructorId == request.auth.uid;
      // Allow clients to read schedules for booking
      allow read: if request.auth != null;
    }
    
    // Session Types: Instructors can only access their own session types
    match /sessionizer/session_types/session_types/{typeId} {
      allow read, write: if request.auth != null && 
        resource.data.idCreatedBy == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.idCreatedBy == request.auth.uid;
      // Allow clients to read session types for booking
      allow read: if request.auth != null;
    }
    
    // Bookings: Both instructors and clients can access their own bookings
    match /sessionizer/bookings/bookings/{bookingId} {
      allow read, write: if request.auth != null && 
        (resource.data.instructorId == request.auth.uid || 
         resource.data.clientId == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.instructorId == request.auth.uid || 
         resource.data.clientId == request.auth.uid);
      // Allow clients to read all bookings for availability checking
      allow read: if request.auth != null;
    }
    
    // Reviews: Both instructors and clients can access their own reviews
    match /sessionizer/reviews/reviews/{reviewId} {
      allow read, write: if request.auth != null && 
        (resource.data.instructorId == request.auth.uid || 
         resource.data.clientId == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.instructorId == request.auth.uid || 
         resource.data.clientId == request.auth.uid);
      // Allow public read for reviews
      allow read: if request.auth != null;
    }
    
    // Notifications: Users can only access their own notifications
    match /sessionizer/notifications/notifications/{notificationId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Mail collection for email notifications
    match /sessionizer/mail/mail/{mailId} {
      allow create: if request.auth != null;
    }
    
    // Public data that can be read by anyone (for instructor discovery, etc.)
    match /sessionizer/instructors/instructors/{instructorId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == instructorId;
    }
    
    // EXISTING COLLECTIONS - Keep existing rules for other apps/collections
    // These rules will preserve access to any existing collections in the project
    // that are NOT under the 'sessionizer' parent collection
    
    // Allow read/write access to any other collections (for existing apps)
    // You can customize these rules based on your existing app requirements
    match /{document=**} {
      // Allow authenticated users to read/write to any other collections
      // This preserves existing functionality for other apps in the project
      allow read, write: if request.auth != null;
    }
  }
}