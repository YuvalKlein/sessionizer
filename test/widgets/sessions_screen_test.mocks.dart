// Mocks generated by Mockito 5.4.6 from annotations
// in myapp/test/widgets/sessions_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:firebase_auth/firebase_auth.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:myapp/services/auth_service.dart' as _i5;
import 'package:myapp/services/session_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSnapshotMetadata_0 extends _i1.SmartFake
    implements _i2.SnapshotMetadata {
  _FakeSnapshotMetadata_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentReference_1<T1 extends Object?> extends _i1.SmartFake
    implements _i2.DocumentReference<T1> {
  _FakeDocumentReference_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SessionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionService extends _i1.Mock implements _i3.SessionService {
  MockSessionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.QuerySnapshot<Object?>> getUpcomingSessions() =>
      (super.noSuchMethod(
            Invocation.method(#getUpcomingSessions, []),
            returnValue: _i4.Stream<_i2.QuerySnapshot<Object?>>.empty(),
          )
          as _i4.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i4.Future<void> joinSession(String? sessionId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#joinSession, [sessionId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> leaveSession(String? sessionId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#leaveSession, [sessionId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i5.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i6.User?> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i4.Stream<_i6.User?>.empty(),
          )
          as _i4.Stream<_i6.User?>);

  @override
  _i4.Future<_i6.User?> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [email, password]),
            returnValue: _i4.Future<_i6.User?>.value(),
          )
          as _i4.Future<_i6.User?>);

  @override
  _i4.Future<_i6.User?> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i4.Future<_i6.User?>.value(),
          )
          as _i4.Future<_i6.User?>);

  @override
  _i4.Future<_i6.User?> registerWithEmailAndPassword(
    String? email,
    String? password,
    String? displayName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#registerWithEmailAndPassword, [
              email,
              password,
              displayName,
            ]),
            returnValue: _i4.Future<_i6.User?>.value(),
          )
          as _i4.Future<_i6.User?>);

  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i2.QuerySnapshot<T> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.QueryDocumentSnapshot<T>> get docs =>
      (super.noSuchMethod(
            Invocation.getter(#docs),
            returnValue: <_i2.QueryDocumentSnapshot<T>>[],
          )
          as List<_i2.QueryDocumentSnapshot<T>>);

  @override
  List<_i2.DocumentChange<T>> get docChanges =>
      (super.noSuchMethod(
            Invocation.getter(#docChanges),
            returnValue: <_i2.DocumentChange<T>>[],
          )
          as List<_i2.DocumentChange<T>>);

  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_0(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i2.SnapshotMetadata);

  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
}

/// A class which mocks [QueryDocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i2.QueryDocumentSnapshot<T> {
  MockQueryDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i7.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i2.DocumentReference<T> get reference =>
      (super.noSuchMethod(
            Invocation.getter(#reference),
            returnValue: _FakeDocumentReference_1<T>(
              this,
              Invocation.getter(#reference),
            ),
          )
          as _i2.DocumentReference<T>);

  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_0(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i2.SnapshotMetadata);

  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);

  @override
  T data() =>
      (super.noSuchMethod(
            Invocation.method(#data, []),
            returnValue: _i7.dummyValue<T>(this, Invocation.method(#data, [])),
          )
          as T);

  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));

  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}
