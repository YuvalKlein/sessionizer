// Mocks generated by Mockito 5.4.6 from annotations
// in myapp/test/features/user/presentation/bloc/user_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:myapp/core/error/failures.dart' as _i6;
import 'package:myapp/core/utils/usecase.dart' as _i8;
import 'package:myapp/features/user/domain/entities/user_profile_entity.dart'
    as _i5;
import 'package:myapp/features/user/domain/repositories/user_repository.dart'
    as _i3;
import 'package:myapp/features/user/domain/usecases/get_instructors.dart'
    as _i7;
import 'package:myapp/features/user/domain/usecases/get_user.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i5.UserProfileEntity>> getInstructors() =>
      (super.noSuchMethod(
            Invocation.method(#getInstructors, []),
            returnValue: _i4.Stream<List<_i5.UserProfileEntity>>.empty(),
          )
          as _i4.Stream<List<_i5.UserProfileEntity>>);

  @override
  _i4.Stream<_i5.UserProfileEntity?> getUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUser, [userId]),
            returnValue: _i4.Stream<_i5.UserProfileEntity?>.empty(),
          )
          as _i4.Stream<_i5.UserProfileEntity?>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.UserProfileEntity>> getUserById(
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [userId]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i6.Failure, _i5.UserProfileEntity>
                >.value(
                  _FakeEither_0<_i6.Failure, _i5.UserProfileEntity>(
                    this,
                    Invocation.method(#getUserById, [userId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.UserProfileEntity>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.UserProfileEntity>> createUser(
    _i5.UserProfileEntity? user,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [user]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i6.Failure, _i5.UserProfileEntity>
                >.value(
                  _FakeEither_0<_i6.Failure, _i5.UserProfileEntity>(
                    this,
                    Invocation.method(#createUser, [user]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.UserProfileEntity>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.UserProfileEntity>> updateUser(
    String? userId,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [userId, data]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i6.Failure, _i5.UserProfileEntity>
                >.value(
                  _FakeEither_0<_i6.Failure, _i5.UserProfileEntity>(
                    this,
                    Invocation.method(#updateUser, [userId, data]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.UserProfileEntity>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, void>> deleteUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, [userId]),
            returnValue: _i4.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#deleteUser, [userId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, void>>);
}

/// A class which mocks [GetInstructors].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetInstructors extends _i1.Mock implements _i7.GetInstructors {
  MockGetInstructors() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, List<_i5.UserProfileEntity>>> call(
    _i8.NoParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i6.Failure, List<_i5.UserProfileEntity>>
                >.value(
                  _FakeEither_0<_i6.Failure, List<_i5.UserProfileEntity>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, List<_i5.UserProfileEntity>>>);
}

/// A class which mocks [GetUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUser extends _i1.Mock implements _i9.GetUser {
  MockGetUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.UserProfileEntity>> call(
    _i9.GetUserParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i6.Failure, _i5.UserProfileEntity>
                >.value(
                  _FakeEither_0<_i6.Failure, _i5.UserProfileEntity>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.UserProfileEntity>>);
}
