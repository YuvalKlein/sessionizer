// Mocks generated by Mockito 5.4.6 from annotations
// in myapp/test/features/auth/presentation/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:myapp/core/error/failures.dart' as _i6;
import 'package:myapp/core/utils/usecase.dart' as _i11;
import 'package:myapp/features/auth/domain/entities/user_entity.dart' as _i5;
import 'package:myapp/features/auth/domain/repositories/auth_repository.dart'
    as _i3;
import 'package:myapp/features/auth/domain/usecases/sign_in_with_email.dart'
    as _i7;
import 'package:myapp/features/auth/domain/usecases/sign_in_with_google.dart'
    as _i8;
import 'package:myapp/features/auth/domain/usecases/sign_out.dart' as _i10;
import 'package:myapp/features/auth/domain/usecases/sign_up_with_email.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i5.UserEntity?> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i4.Stream<_i5.UserEntity?>.empty(),
          )
          as _i4.Stream<_i5.UserEntity?>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>
  signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue:
                _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i5.UserEntity>(
                    this,
                    Invocation.method(#signInWithEmailAndPassword, [], {
                      #email: email,
                      #password: password,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>> signInWithGoogle({
    required bool? isInstructor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, [], {
              #isInstructor: isInstructor,
            }),
            returnValue:
                _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i5.UserEntity>(
                    this,
                    Invocation.method(#signInWithGoogle, [], {
                      #isInstructor: isInstructor,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>
  signUpWithEmailAndPassword({
    required String? email,
    required String? password,
    required String? name,
    required bool? isInstructor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmailAndPassword, [], {
              #email: email,
              #password: password,
              #name: name,
              #isInstructor: isInstructor,
            }),
            returnValue:
                _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i5.UserEntity>(
                    this,
                    Invocation.method(#signUpWithEmailAndPassword, [], {
                      #email: email,
                      #password: password,
                      #name: name,
                      #isInstructor: isInstructor,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, void>> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i4.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#signOut, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, void>> deleteAccount() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAccount, []),
            returnValue: _i4.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#deleteAccount, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, void>>);
}

/// A class which mocks [SignInWithEmail].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithEmail extends _i1.Mock implements _i7.SignInWithEmail {
  MockSignInWithEmail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>> call(
    _i7.SignInWithEmailParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i5.UserEntity>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>);
}

/// A class which mocks [SignInWithGoogle].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithGoogle extends _i1.Mock implements _i8.SignInWithGoogle {
  MockSignInWithGoogle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>> call(
    _i8.SignInWithGoogleParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i5.UserEntity>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>);
}

/// A class which mocks [SignUpWithEmail].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpWithEmail extends _i1.Mock implements _i9.SignUpWithEmail {
  MockSignUpWithEmail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>> call(
    _i9.SignUpWithEmailParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i5.UserEntity>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.UserEntity>>);
}

/// A class which mocks [SignOut].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignOut extends _i1.Mock implements _i10.SignOut {
  MockSignOut() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, void>> call(_i11.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, void>>);
}
