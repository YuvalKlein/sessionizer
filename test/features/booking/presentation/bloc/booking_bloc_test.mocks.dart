// Mocks generated by Mockito 5.4.6 from annotations
// in myapp/test/features/booking/presentation/bloc/booking_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:myapp/core/error/failures.dart' as _i6;
import 'package:myapp/features/booking/domain/entities/booking_entity.dart'
    as _i5;
import 'package:myapp/features/booking/domain/repositories/booking_repository.dart'
    as _i3;
import 'package:myapp/features/booking/domain/usecases/cancel_booking.dart'
    as _i9;
import 'package:myapp/features/booking/domain/usecases/create_booking.dart'
    as _i8;
import 'package:myapp/features/booking/domain/usecases/get_bookings.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BookingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookingRepository extends _i1.Mock implements _i3.BookingRepository {
  MockBookingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i5.BookingEntity>> getBookings(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getBookings, [userId]),
            returnValue: _i4.Stream<List<_i5.BookingEntity>>.empty(),
          )
          as _i4.Stream<List<_i5.BookingEntity>>);

  @override
  _i4.Stream<List<_i5.BookingEntity>> getBookingsByInstructor(
    String? instructorId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getBookingsByInstructor, [instructorId]),
            returnValue: _i4.Stream<List<_i5.BookingEntity>>.empty(),
          )
          as _i4.Stream<List<_i5.BookingEntity>>);

  @override
  _i4.Stream<List<_i5.BookingEntity>> getBookingsByClient(String? clientId) =>
      (super.noSuchMethod(
            Invocation.method(#getBookingsByClient, [clientId]),
            returnValue: _i4.Stream<List<_i5.BookingEntity>>.empty(),
          )
          as _i4.Stream<List<_i5.BookingEntity>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>> getBooking(
    String? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getBooking, [id]),
            returnValue:
                _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i5.BookingEntity>(
                    this,
                    Invocation.method(#getBooking, [id]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>> createBooking(
    _i5.BookingEntity? booking,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createBooking, [booking]),
            returnValue:
                _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i5.BookingEntity>(
                    this,
                    Invocation.method(#createBooking, [booking]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>> updateBooking(
    _i5.BookingEntity? booking,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateBooking, [booking]),
            returnValue:
                _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i5.BookingEntity>(
                    this,
                    Invocation.method(#updateBooking, [booking]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, void>> deleteBooking(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBooking, [id]),
            returnValue: _i4.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#deleteBooking, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>> cancelBooking(
    String? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#cancelBooking, [id]),
            returnValue:
                _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i5.BookingEntity>(
                    this,
                    Invocation.method(#cancelBooking, [id]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>>);

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>> confirmBooking(
    String? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#confirmBooking, [id]),
            returnValue:
                _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i5.BookingEntity>(
                    this,
                    Invocation.method(#confirmBooking, [id]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>>);
}

/// A class which mocks [GetBookings].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBookings extends _i1.Mock implements _i7.GetBookings {
  MockGetBookings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, List<_i5.BookingEntity>>> call(
    _i7.GetBookingsParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i6.Failure, List<_i5.BookingEntity>>
                >.value(
                  _FakeEither_0<_i6.Failure, List<_i5.BookingEntity>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, List<_i5.BookingEntity>>>);
}

/// A class which mocks [CreateBooking].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateBooking extends _i1.Mock implements _i8.CreateBooking {
  MockCreateBooking() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>> call(
    _i8.CreateBookingParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i5.BookingEntity>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, _i5.BookingEntity>>);
}

/// A class which mocks [CancelBooking].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelBooking extends _i1.Mock implements _i9.CancelBooking {
  MockCancelBooking() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, void>> call(
    _i9.CancelBookingParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i6.Failure, void>>);
}
